{{ $values := .Values }}
{{- $fullName := include "generic-app.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-{{ $fullName }}
  labels:
    {{- include "generic-app.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "generic-app.selectorLabels" . | nindent 6 }}
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "generic-app.selectorLabels" . | nindent 8 }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      {{- include "generic-app.imagePullSecrets" . | nindent 6 }}
      containers:
        - name: web-{{ $fullName }}
          image: {{ $values.image }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ $values.port }}
          envFrom:
            - configMapRef:
                name: env-configmap-{{ $fullName }}
          {{- if $values.envEncrypted }}
            - secretRef:
                name: env-secret-{{ $fullName }}
          {{- end }}
{{- if $values.workers }}
{{- range $keyWorker, $valuesWorker := $values.workers }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-{{ $fullName }}-{{ $keyWorker }}
  labels:
    {{- include "generic-app.labels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consumer-{{ $fullName }}-{{ $keyWorker }}
  replicas: {{ $valuesWorker.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consumer-{{ $fullName }}-{{ $keyWorker }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      {{- include "generic-app.imagePullSecrets" $ | nindent 6 }}
      containers:
        - name: consumer-{{ $fullName }}-{{ $keyWorker }}
          image: {{ $values.image }}
          imagePullPolicy: Always
          command:
            {{- range (split " " $valuesWorker.command) }}
            - {{ . | quote  }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: env-configmap-{{ $fullName }}
                  {{- if $values.envEncrypted }}
            - secretRef:
                name: env-secret-{{ $fullName }}
                  {{- end }}
{{- end }}
{{- end }}
{{- if $values.cronjobs }}
{{- range $keyCronjob, $valuesCronjob := $values.cronjobs }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cronjob-{{ $fullName }}-{{ $keyCronjob }}
  labels:
    {{- include "generic-app.labels" $ | nindent 4 }}
spec:
  schedule: "{{ $valuesCronjob.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          {{- include "generic-app.imagePullSecrets" $ | nindent 10 }}
          containers:
            - name: cron-{{ $fullName }}-{{ $keyCronjob }}
              image: {{ $values.image }}
              imagePullPolicy: Always
              command:
              {{- range (split " " $valuesCronjob.command) }}
                - {{ . | quote  }}
              {{- end }}
              envFrom:
                - configMapRef:
                    name: env-configmap-{{ $fullName }}
              {{- if $values.envEncrypted }}
                - secretRef:
                    name: env-secret-{{ $fullName }}
              {{- end }}
          restartPolicy: Never
{{- end }}
{{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: env-configmap-{{ $fullName }}
data:
  {{- range $key, $value := $values.env }}
  {{ $key }}: "{{ $value }}"
  {{- end }}