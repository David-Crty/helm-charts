{{ $values := .Values }}
{{- $fullName := include "generic-app.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-{{ $fullName }}
  labels:
    {{- include "generic-app.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "generic-app.selectorLabels" . | nindent 6 }}
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "generic-app.selectorLabels" . | nindent 8 }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- if $values.enablePrometheus }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics/prometheus"
        {{- end }}
    spec:
      containers:
        - name: web-{{ $fullName }}
          image: {{ $values.image }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ $values.port }}
          envFrom:
            - configMapRef:
                name: env-configmap-{{ $fullName }}
          {{- if $values.envEncrypted }}
            - secretRef:
                name: env-secret-{{ $fullName }}
          {{- end }}
          {{- if $values.healthCheckPath }}
          livenessProbe:
            httpGet:
              path: {{ $values.healthCheckPath }}
              port: http
            failureThreshold: 3
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: {{ $values.healthCheckPath }}
              port: http
            failureThreshold: 60
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ $values.healthCheckPath }}
              port: http
            failureThreshold: 1
            periodSeconds: 5
          {{- end }}
{{- if $values.workers }}
{{- range $keyWorker, $valuesWorker := $values.workers }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-{{ $fullName }}-{{ $keyWorker }}
  labels:
    {{- include "generic-app.labels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consumer-{{ $fullName }}-{{ $keyWorker }}
  replicas: {{ $valuesWorker.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consumer-{{ $fullName }}-{{ $keyWorker }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
        - name: consumer-{{ $fullName }}-{{ $keyWorker }}
          image: {{ $values.image }}
          imagePullPolicy: Always
          command:
            {{- range (split " " $valuesWorker.command) }}
            - {{ . | quote  }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: env-configmap-{{ $fullName }}
                  {{- if $values.envEncrypted }}
            - secretRef:
                name: env-secret-{{ $fullName }}
                  {{- end }}
{{- end }}
{{- end }}